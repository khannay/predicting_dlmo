let DELTA_T = 0.01;
let MILLIS_PER_HOUR = 60.0 * 60.0 * 1000.0;
let MILLIS_PER_MINUTE = 60.0 * 1000.0;
let DEFAULT_LIGHT_VALUE = 500.0;
let LIGHT_SCALAR = 10.0;
var localLD;


function convertStepsToLight(steps) {
    return steps;
}


function populateLightFromStepsAndSleep(timestamps, steps, sleep) {

    let lengthOfTimestamps = timestamps.length;
    let durationInHours = Math.round((timestamps[lengthOfTimestamps - 1] - timestamps[0]));


    let lightArrayLength = Math.round(durationInHours / DELTA_T);
    localLD = new Array(lightArrayLength + 1);

    for (let i = 0; i < lightArrayLength + 1; i++) {
        localLD[i] = 0;
    }

    for (let i = 0; i < lengthOfTimestamps; i++) {
        for (let index = Math.round(i / (DELTA_T * 60.0)); index < ((i + 1) / (DELTA_T * 60.0)); index++) {

            localLD[index] = localLD[index] + convertStepsToLight(steps[i]) * (MILLIS_PER_MINUTE / MILLIS_PER_HOUR) / DELTA_T;

            // if (sleep[i] === 1) {
            //     localLD[index] = 0;
            // }
        }
    }


}

function populateLightDarkWithFixedSchedule(wakeHour, bedHour, durationInHours) {

    let lightArrayLength = (durationInHours / DELTA_T);
    localLD = new Array(lightArrayLength + 1);

    for (let i = 0; i < lightArrayLength + 1; i++) {

        let hour = i % lightArrayLength;
        let lightValue = DEFAULT_LIGHT_VALUE;
        if (wakeHour < bedHour) {                 // e.g. wakeHour = 8, bedHour = 23
            if (hour < wakeHour / DELTA_T || hour >= bedHour / DELTA_T) {
                lightValue = 0;
            }
        } else {
            if (hour < wakeHour / DELTA_T && hour >= bedHour / DELTA_T) { // e.g. wakeHour = 10, bedHour = 2
                lightValue = 0;
            }
        }

        localLD[i] = lightValue * LIGHT_SCALAR + 200;

    }
}

function alph(I) {

    let I0 = 9500.0;
    let p = .6;
    let a0 = .16;
    return a0 * (Math.pow(I, p) / Math.pow(I0, p));
}


function clockModel(t, y) {

    let index = Math.round(t / DELTA_T);

    let I = localLD[index];

    let x = y[0];
    let xc = y[1];
    let n = y[2];

    let tx = 24.2;
    let G = 19.875;
    let k = .55;
    let mu = .23;
    let b = 0.013;

    let Bh = G * (1 - n) * alph(I);
    let B = Bh * (1 - .4 * x) * (1 - .4 * xc);

    let dydt = [0, 0, 0];

    dydt[0] = Math.PI / 12.0 * (xc + B);
    dydt[1] = Math.PI / 12.0 * (mu * (xc - 4.0 * Math.pow(xc, 3.0) / 3.0) - x * (Math.pow((24.0 / (.99669 * tx)), 2.0) + k * B));
    dydt[2] = 60.0 * (alph(I) * (1.0 - n) - b * n);


    return dydt;
}

function rk4(tot, initialConditions) {


    let dt = DELTA_T;
    let N = Math.round(tot / dt);
    let t = 0;
    let output = new Array(N + 1);


    let w = [initialConditions[0], initialConditions[1], initialConditions[2]];

    output[0] = [w[0], w[1], w[2]];

    for (let i = 0; i < N; i++) {

        let dydt = clockModel(t, w);
        let k1 = [dt * dydt[0], dt * dydt[1], dt * dydt[2]];
        let w2 = [w[0] + k1[0] / 2, w[1] + k1[1] / 2, w[2] + k1[2] / 2];
        dydt = clockModel(t + dt / 2, w2);
        let k2 = [dt * dydt[0], dt * dydt[1], dt * dydt[2]];
        let w3 = [w[0] + k2[0] / 2, w[1] + k2[1] / 2, w[2] + k2[2] / 2];
        dydt = clockModel(t + dt / 2, w3);
        let k3 = [dt * dydt[0], dt * dydt[1], dt * dydt[2]];
        let w4 = [w[0] + k3[0], w[1] + k3[1], w[2] + k3[2]];
        dydt = clockModel(t + dt, w4);
        let k4 = [dt * dydt[0], dt * dydt[1], dt * dydt[2]];
        let w5 = [w[0] + (k1[0] + 2 * k2[0] + 2 * k3[0] + k4[0]) / 6, w[1] + (k1[1] + 2 * k2[1] + 2 * k3[1] + k4[1]) / 6, w[2] + (k1[2] + 2 * k2[2] + 2 * k3[2] + k4[2]) / 6];

        w[0] = w5[0];
        w[1] = w5[1];
        w[2] = w5[2];

        t = t + dt;

        output[i + 1] = [w[0], w[1], w[2]];
    }

    return output;
}


function getCircadianOutput(timestamps, steps, sleep, firstTimestamp) {

    let lengthOfTimestamps = timestamps.length;
    let durationInHours = Math.round((timestamps[lengthOfTimestamps - 1] - timestamps[0]));

    populateLightFromStepsAndSleep(timestamps, steps, sleep);
    // let initialConditions = new Array(3);
    // initialConditions[0] = 2.0 * Math.random() - 1.0;
    // initialConditions[1] = 2.0 * Math.random() - 1.0;
    // initialConditions[2] = Math.random();
    let initialConditions = getICFromLimitCycleAtTime(firstTimestamp);
    
    let output = rk4(durationInHours, initialConditions);
    output = cropOutput(output, 72);

    return output;
}


function cropOutput(output, numHoursFromEndToInclude) {
    let newOutput = [];
    let counter = 0;
    for (let i = output.length - Math.round(numHoursFromEndToInclude / DELTA_T); i < output.length; i++) {
        newOutput[counter] = output[i];
        counter = counter + 1;
    }
    return newOutput;
}

function getICFromLimitCycleAtTime(time){
    let DT_LIMIT_CYCLE = 0.1;
    let limitCycle = [[-0.228395, -1.326270, 0.736055],
[-0.263381, -1.319904, 0.680817],
[-0.298255, -1.312633, 0.629748],
[-0.332996, -1.304464, 0.582300],
[-0.367603, -1.295397, 0.538473],
[-0.402067, -1.285433, 0.498094],
[-0.436353, -1.274583, 0.460560],
[-0.470458, -1.262847, 0.425861],
[-0.504381, -1.250227, 0.393931],
[-0.538068, -1.236736, 0.364264],
[-0.571514, -1.222377, 0.336805],
[-0.604721, -1.207150, 0.311543],
[-0.637603, -1.191072, 0.288101],
[-0.670135, -1.174151, 0.266377],
[-0.702326, -1.156383, 0.246380],
[-0.734052, -1.137793, 0.227861],
[-0.765227, -1.118397, 0.210679],
[-0.795862, -1.098191, 0.194841],
[-0.825832, -1.077199, 0.180215],
[-0.854927, -1.055459, 0.166629],
[-0.883147, -1.032971, 0.154083],
[-0.910432, -1.009746, 0.142529],
[-0.936436, -0.985861, 0.131789],
[-0.961150, -0.961318, 0.121859],
[-0.984556, -0.936121, 0.112722],
[-1.006348, -0.910373, 0.104234],
[-1.026480, -0.884089, 0.096376],
[-1.044961, -0.857267, 0.089147],
[-1.061689, -0.830015, 0.082440],
[-1.076622, -0.802370, 0.076224],
[-1.089764, -0.774328, 0.070500],
[-1.101223, -0.745974, 0.065202],
[-1.111050, -0.717369, 0.060286],
[-1.119240, -0.688510, 0.055752],
[-1.125948, -0.659445, 0.051568],
[-1.131363, -0.630250, 0.047681],
[-1.135484, -0.600923, 0.044090],
[-1.138392, -0.571483, 0.040784],
[-1.140353, -0.542001, 0.037712],
[-1.141374, -0.512480, 0.034870],
[-1.141482, -0.482926, 0.032255],
[-1.140900, -0.453390, 0.029827],
[-1.139658, -0.423881, 0.027578],
[-1.137759, -0.394400, 0.025509],
[-1.135343, -0.364980, 0.023590],
[-1.132458, -0.335633, 0.021811],
[-1.129100, -0.306359, 0.020173],
[-1.125340, -0.277178, 0.018658],
[-1.121227, -0.248104, 0.017251],
[-1.116761, -0.219137, 0.015953],
[-1.111966, -0.190286, 0.014756],
[-1.106883, -0.161569, 0.013644],
[-1.101513, -0.132986, 0.012616],
[-1.095864, -0.104541, 0.011670],
[-1.089957, -0.076250, 0.010791],
[-1.083796, -0.048116, 0.009978],
[-1.077381, -0.020139, 0.009230],
[-1.070720, 0.007664, 0.008535],
[-1.063814, 0.035290, 0.007891],
[-1.056663, 0.062739, 0.007299],
[-1.049265, 0.089997, 0.006750],
[-1.041615, 0.117058, 0.006241],
[-1.033716, 0.143922, 0.005772],
[-1.025559, 0.170578, 0.005339],
[-1.017135, 0.197014, 0.004936],
[-1.008444, 0.223232, 0.004565],
[-0.999482, 0.249225, 0.004222],
[-0.990228, 0.274975, 0.003904],
[-0.980682, 0.300484, 0.003610],
[-0.970843, 0.325748, 0.003339],
[-0.960684, 0.350745, 0.003088],
[-0.950202, 0.375475, 0.002855],
[-0.939398, 0.399938, 0.002641],
[-0.928244, 0.424109, 0.002442],
[-0.916732, 0.447985, 0.002258],
[-0.904864, 0.471566, 0.002089],
[-0.892615, 0.494830, 0.001932],
[-0.879972, 0.517768, 0.001786],
[-0.866928, 0.540378, 0.001652],
[-0.853460, 0.562649, 0.001528],
[-0.839570, 0.584565, 0.001412],
[-0.808014, 0.617093, 0.189426],
[-0.779289, 0.646502, 0.329417],
[-0.752449, 0.673498, 0.433609],
[-0.726819, 0.698579, 0.511184],
[-0.701925, 0.722093, 0.568888],
[-0.677427, 0.744288, 0.611792],
[-0.653076, 0.765340, 0.643727],
[-0.628695, 0.785375, 0.667584],
[-0.604180, 0.804466, 0.685171],
[-0.579429, 0.822683, 0.698319],
[-0.554393, 0.840060, 0.708087],
[-0.529033, 0.856624, 0.715336],
[-0.503331, 0.872388, 0.720700],
[-0.477275, 0.887364, 0.724771],
[-0.450863, 0.901553, 0.727643],
[-0.424113, 0.914956, 0.729885],
[-0.397029, 0.927573, 0.731561],
[-0.369602, 0.939402, 0.732695],
[-0.341894, 0.950434, 0.733587],
[-0.313921, 0.960665, 0.734286],
[-0.285681, 0.970095, 0.734794],
[-0.257149, 0.978724, 0.735111],
[-0.228419, 0.986538, 0.735352],
[-0.199545, 0.993534, 0.735553],
[-0.170526, 0.999711, 0.735713],
[-0.141363, 1.005069, 0.735831],
[-0.112055, 1.009608, 0.735909],
[-0.082601, 1.013329, 0.735949],
[-0.053078, 1.016225, 0.735977],
[-0.023514, 1.018295, 0.735999],
[0.006091, 1.019539, 0.736015],
[0.035740, 1.019955, 0.736025],
[0.065376, 1.019547, 0.736033],
[0.094976, 1.018316, 0.736039],
[0.124542, 1.016262, 0.736043],
[0.154076, 1.013384, 0.736046],
[0.183524, 1.009689, 0.736049],
[0.212869, 1.005182, 0.736050],
[0.242110, 0.999863, 0.736052],
[0.271252, 0.993728, 0.736053],
[0.300262, 0.986787, 0.736053],
[0.329101, 0.979054, 0.736054],
[0.357769, 0.970528, 0.736054],
[0.386266, 0.961210, 0.736054],
[0.414594, 0.951099, 0.736054],
[0.442744, 0.940194, 0.736055],
[0.470641, 0.928530, 0.736055],
[0.498285, 0.916107, 0.736055],
[0.525675, 0.902925, 0.736055],
[0.552813, 0.888985, 0.736055],
[0.579718, 0.874277, 0.736055],
[0.606383, 0.858807, 0.736055],
[0.632624, 0.842638, 0.736055],
[0.658439, 0.825770, 0.736055],
[0.683831, 0.808202, 0.736055],
[0.708798, 0.789935, 0.736055],
[0.733341, 0.770968, 0.736055],
[0.757469, 0.751299, 0.736055],
[0.781173, 0.730914, 0.736055],
[0.804085, 0.709938, 0.736055],
[0.826205, 0.688371, 0.736055],
[0.847533, 0.666213, 0.736055],
[0.868068, 0.643464, 0.736055],
[0.887812, 0.620125, 0.736055],
[0.906808, 0.596160, 0.736055],
[0.924806, 0.571681, 0.736055],
[0.941641, 0.546782, 0.736055],
[0.957313, 0.521463, 0.736055],
[0.971823, 0.495723, 0.736055],
[0.985171, 0.469563, 0.736055],
[0.997356, 0.442982, 0.736055],
[1.008381, 0.415968, 0.736055],
[1.018270, 0.388700, 0.736055],
[1.027024, 0.361197, 0.736055],
[1.034643, 0.333460, 0.736055],
[1.041128, 0.305488, 0.736055],
[1.046477, 0.277282, 0.736055],
[1.050741, 0.248841, 0.736055],
[1.054154, 0.220302, 0.736055],
[1.056730, 0.191676, 0.736055],
[1.058468, 0.162962, 0.736055],
[1.059369, 0.134162, 0.736055],
[1.059433, 0.105275, 0.736055],
[1.058721, 0.076313, 0.736055],
[1.057435, 0.047364, 0.736055],
[1.055578, 0.018428, 0.736055],
[1.053147, -0.010495, 0.736055],
[1.050145, -0.039404, 0.736055],
[1.046565, -0.068303, 0.736055],
[1.042510, -0.097144, 0.736055],
[1.038019, -0.125910, 0.736055],
[1.033091, -0.154599, 0.736055],
[1.027728, -0.183213, 0.736055],
[1.021948, -0.211752, 0.736055],
[1.015794, -0.240165, 0.736055],
[1.009267, -0.268448, 0.736055],
[1.002366, -0.296603, 0.736055],
[0.995091, -0.324629, 0.736055],
[0.987443, -0.352526, 0.736055],
[0.979450, -0.380302, 0.736055],
[0.971084, -0.407889, 0.736055],
[0.962343, -0.435286, 0.736055],
[0.953229, -0.462493, 0.736055],
[0.943741, -0.489510, 0.736055],
[0.933878, -0.516338, 0.736055],
[0.923642, -0.542975, 0.736055],
[0.913026, -0.569430, 0.736055],
[0.901986, -0.595625, 0.736055],
[0.890522, -0.621559, 0.736055],
[0.878634, -0.647233, 0.736055],
[0.866323, -0.672646, 0.736055],
[0.853587, -0.697798, 0.736055],
[0.840432, -0.722700, 0.736055],
[0.826827, -0.747316, 0.736055],
[0.812741, -0.771591, 0.736055],
[0.798173, -0.795524, 0.736055],
[0.783123, -0.819116, 0.736055],
[0.767591, -0.842366, 0.736055],
[0.751576, -0.865274, 0.736055],
[0.735081, -0.887856, 0.736055],
[0.718083, -0.910023, 0.736055],
[0.700579, -0.931755, 0.736055],
[0.682568, -0.953053, 0.736055],
[0.664051, -0.973917, 0.736055],
[0.645028, -0.994346, 0.736055],
[0.625496, -1.014345, 0.736055],
[0.605452, -1.033911, 0.736055],
[0.584952, -1.052941, 0.736055],
[0.563994, -1.071435, 0.736055],
[0.542580, -1.089392, 0.736055],
[0.520708, -1.106813, 0.736055],
[0.498380, -1.123697, 0.736055],
[0.475594, -1.140045, 0.736055],
[0.452310, -1.155876, 0.736055],
[0.428698, -1.171075, 0.736055],
[0.404769, -1.185635, 0.736055],
[0.380523, -1.199556, 0.736055],
[0.355960, -1.212837, 0.736055],
[0.331081, -1.225478, 0.736055],
[0.305885, -1.237480, 0.736055],
[0.280372, -1.248842, 0.736055],
[0.254548, -1.259561, 0.736055],
[0.228546, -1.269572, 0.736055],
[0.202381, -1.278867, 0.736055],
[0.176054, -1.287448, 0.736055],
[0.149563, -1.295313, 0.736055],
[0.122910, -1.302463, 0.736055],
[0.096093, -1.308895, 0.736055],
[0.069194, -1.314579, 0.736055],
[0.042235, -1.319506, 0.736055],
[0.015216, -1.323678, 0.736055],
[-0.011866, -1.327094, 0.736055],
[-0.038972, -1.329743, 0.736055],
[-0.066058, -1.331611, 0.736055],
[-0.093124, -1.332700, 0.736055],
[-0.120171, -1.333008, 0.736055],
[-0.147188, -1.332533, 0.736055],
[-0.174119, -1.331262, 0.736055],
[-0.200963, -1.329197, 0.736055],
[-0.228395, -1.326270, 0.736055]];
    
    index = Math.floor((time % 24)/DT_LIMIT_CYCLE);
    return limitCycle[index];
}
